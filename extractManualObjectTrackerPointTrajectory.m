function [t1, x1, y1, t2, x2, y2] = extractManualObjectTrackerPointTrajectory(trackingFilePath, videoFrame)
% extractManualObjectTrackerPointTrajectory: Extract coordinates from manualObjectTracker file
% usage:  [t1, x1, y1, t2, x2, y2] = extractManualObjectTrackerPointTrajectory(trackingFilePath)
%
% where,
%    t1 is a 1D array of frame numbers where each element of t1 provides 
%       frame number corresponding to each x1 and y1 value. t1, x1, and y1
%       should all have the same length.
%    x1 is a 1D array of x coordinates for the 1st series of tracked 
%       points. t1, x1, and y1 should all have the same length.
%    y1 is a 1D array of y coordinates for the 1st series of tracked 
%       points. t1, x1, and y1 should all have the same length.
%    t2 is a 1D array of frame numbers where each element of t2 provides 
%       frame number corresponding to each x2 and y2 value. t2, x2, and y2
%       should all have the same length.
%    x2 is a 1D array of x coordinates for the 2nd series of tracked 
%       points. t2, x2, and y2 should all have the same length.
%    y2 is a 1D array of y coordinates for the 2nd series of tracked 
%       points. t2, x2, and y2 should all have the same length.
%    videoFrame is a 2D H x W or 3D H x W x 3 double array representing a
%       black and white or color image
%    trackingFilePath is a char array representing the file path where a
%       tracking .mat file from manualObjectTracker can be found.
%
%   This function is designed to load in a file generated by
%       manualObjectTracker and extract two trajectories from the x/yPoints
%       field. It assumes there are two trajectories in each frame, and 
%       that for each trajectory in each frame, there are either zero or
%       one points. If that assumption is violated, an error will result.
%   
%   See also: manualObjectTracker

if ~exist('videoFrame', 'var')
    videoFrame = [];
end

% Load tracking file
S = load(trackingFilePath, 'outputStruct');

% Extract two x coordinates and two y coordinates from each frame, if
% present. If not, NaN placeholder values will be generated.
x1 = cellfun(@getCoord, S.outputStruct.ROIData.AnonymousUser.xPoints(1, :));
x2 = cellfun(@getCoord, S.outputStruct.ROIData.AnonymousUser.xPoints(2, :));
y1 = cellfun(@getCoord, S.outputStruct.ROIData.AnonymousUser.yPoints(1, :));
y2 = cellfun(@getCoord, S.outputStruct.ROIData.AnonymousUser.yPoints(2, :));

% Create a t1 and t2 variable containing the frame numbers of each tracked
% point, and get rid of the NaN placeholder values.
t1 = find(~isnan(x1));
x1 = x1(t1);
y1 = y1(t1);

t2 = find(~isnan(x2));
x2 = x2(t2);
y2 = y2(t2);

%% Example of plotting the data:

% Create color vectors to visualize the time progression of the trajectory
cmap = jet(256);
nColors = size(cmap, 1);

c1 = round((t1 - min(t1))*(nColors-1)/(max(t1) - min(t1))) + 1;
c2 = round((t2 - min(t2))*(nColors-1)/(max(t2) - min(t2))) + 1;

% Prepare figure and axes:
f = figure(); 
ax1 = subplot(1, 2, 1, 'Parent', f); colormap(cmap); axis(ax1, 'equal');
ax2 = subplot(1, 2, 2, 'Parent', f); colormap(cmap); axis(ax2, 'equal');

if ~isempty(x1)
    % Plot first trajectory using custom "linec" function
    if ~isempty(videoFrame)
        imshow(videoFrame, 'Parent', ax1);
    end
    linec(x1, y1, 'Color', c1, 'Parent', ax1, 'Marker', 'o');
    text(ax1, x1(1)+3, y1(1), ['t=', num2str(t1(1))]);
    text(ax1, x1(end)+3, y1(end), ['t=', num2str(t1(end))]);
end

if ~isempty(x2)
    % Plot second trajectory
    if ~isempty(videoFrame)
        imshow(videoFrame, 'Parent', ax2);
    end
    linec(x2, y2, 'Color', c2, 'Parent', ax2, 'Marker', 'o');
    text(ax2, x2(1)+3, y2(1), ['t=', num2str(t2(1))]);
    text(ax2, x2(end)+3, y2(end), ['t=', num2str(t2(end))]);
end

end

function coordinate = getCoord(coordList)
% Extract a single value from a list of values. 
%
%   coordList = a 1D array of numerical values
%
%   If the coordList is empty, NaN will be returned. If the coordList has a
%   single value, that value will be returned. If it has more than one
%   value, an error will be raised.

    if isempty(coordList)
        coordinate = NaN;
    elseif length(coordList) == 1
        coordinate = coordList;
    else
        error('This function requires only one point per trajectory per frame, but multiple were found.');
    end
end