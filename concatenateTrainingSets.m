function [imageStack, maskStack] = concatenateTrainingSets(trainingSetPaths, outputTrainingSetPath)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% concatenateTrainingSets: Concatenate training sets
% usage:  [imageStack, maskStack] = concatenateTrainingSets(
%                               trainingSetPaths, outputTrainingSetPath)
%
% where,
%    trainingSetPaths is a cell array of char arrays representing two or
%       more paths to training sets created by
%       assembleRandomManualTrackingAnnotations. Each training set should 
%       be a .mat file containing the following variables:
%           imageStack - a N x H x W uint8 array representing a stack of
%               grayscale images with N frames, each of sze W x H
%           maskStack - a N x H x W logical array representing a stack of
%               N masks, each of size W x H, where each mask labels the
%               corresponding image in imageStack
%    outputTrainingSetPath is an optional char array representing a path to
%       save the concatenated training set. If omitted or empty, the
%       training set will be returned in the output variables imageStack
%       and maskStack, but will not be saved to disk.
%    imageStack is a M x H x W uint8 array representing the concatenated
%       imageStacks loaded from each trainingSetPath
%    maskStack is a M x H x W logical array representing the concatenated
%       maskStacks loaded from each trainingSetPath
%
% This function is designed to take multiple training sets generated by 
%   assembleRandomManualTrackingAnnotations (from tracings made by
%   manualObjectTracker) and concatenate them into a single training set.
%
% See also: manualObjectTracker, assembleRandomManualTrackingAnnotations
%
% Version: 1.0
% Author:  Brian Kardon, concept by Teja Bollu
% Email:   bmk27=cornell*org, brian*kardon=google*com
% Real_email = regexprep(Email,{'=','*'},{'@','.'})
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Preallocate training set arrays
imageStacks = cell(1, length(trainingSetPaths));
maskStacks = cell(1, length(trainingSetPaths));

% Load training sets
for k = 1:length(trainingSetPaths)
    trainingSetPath = trainingSetPaths{k};
    fprintf('Loading training set from %s...\n', trainingSetPath);
    S = load(trainingSetPath);
    try
        imageStacks{k} = S.imageStack;
        maskStacks{k} = logical(S.maskStack);
    catch
        % Try some legacy field names
        try
            imageStacks{k} = S.assembledRandomizedClips_top;
            maskStacks{k} = logical(S.mask_stack_top);
        catch
            try
                imageStacks{k} = S.assembledRandomizedClips_top;
                maskStacks{k} = logical(S.mask_stack_top);
            catch
                try
                    imageStacks{k} = S.assembledRandomizedClips_bot;
                    maskStacks{k} = logical(S.mask_stack_bot);
                catch
                    try
                        imageStacks{k} = S.assembledRandomizedClips_bottom;
                        maskStacks{k} = logical(S.mask_stack_bottom);
                    catch
                        fn = join(fieldnames(S), ',');
                        fn = fn{1};
                        error('Could not find appropriate fields for imageStack and maskStack in file %s - instead found fields %s', trainingSetPath, fn);
                    end
                end
            end
        end
    end
    fprintf('...found %d frames.\n', size(imageStacks{k}, 1));
end

fprintf('Concatenating training sets...\n');
% Concatenate image stacks
imageStack = cat(1, imageStacks{:});
maskStack = cat(1, maskStacks{:});

% Save to disk if requested
if exist('outputTrainingSetPath', 'var') && ~isempty(outputTrainingSetPath)
    fprintf('Saving concatenated training set to %s\n', outputTrainingSetPath);
    save(outputTrainingSetPath, 'imageStack', 'maskStack');
end